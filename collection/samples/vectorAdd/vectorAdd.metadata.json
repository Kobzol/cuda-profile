{
  "kernel": "vectorAdd",
  "locations": [
    {
      "file": "\/home\/kobzol\/projects\/diplomka\/collection\/samples\/vectorAdd\/source.cu",
      "line": 41,
      "name": "load"
    },
    {
      "file": "\/home\/kobzol\/projects\/diplomka\/collection\/samples\/vectorAdd\/source.cu",
      "line": 41,
      "name": "load"
    },
    {
      "file": "\/home\/kobzol\/projects\/diplomka\/collection\/samples\/vectorAdd\/source.cu",
      "line": 41,
      "name": "store"
    }
  ],
  "nameMap": [],
  "source": {
    "content": "\/**\n * Copyright 1993-2015 NVIDIA Corporation.  All rights reserved.\n *\n * Please refer to the NVIDIA end user license agreement (EULA) associated\n * with this source code for terms and conditions that govern your use of\n * this software. Any use, reproduction, disclosure, or distribution of\n * this software and related documentation outside the terms of the EULA\n * is strictly prohibited.\n *\n *\/\n\n\/**\n * Vector addition: C = A + B.\n *\n * This sample is a very basic sample that implements element by element\n * vector addition. It is the same as the sample illustrating Chapter 2\n * of the programming guide with some additions like error checking.\n *\/\n\n#include <stdio.h>\n\n\/\/ For the CUDA runtime routines (prefixed with \"cuda_\")\n#include <cuda_runtime.h>\n\n#include <helper_cuda.h>\n\n#include <CuprRuntime.h>\n\/**\n * CUDA Kernel Device code\n *\n * Computes the vector addition of A and B into C. The 3 vectors have the same\n * number of elements numElements.\n *\/\n__global__ void\nvectorAdd(const float *A, const float *B, float *C, int numElements)\n{\n    int i = blockDim.x * blockIdx.x + threadIdx.x;\n\n    if (i < numElements)\n    {\n        C[i] = A[i] + B[i];\n    }\n}\n\n\/**\n * Host main routine\n *\/\nint main(int argc, char** argv)\n{\n    \/\/ Error code to check return values for CUDA calls\n    cudaError_t err = cudaSuccess;\n\n    \/\/ Print the vector length to be used, and compute its size\n    int numElements = 50000;\n    size_t size = numElements * sizeof(float);\n    \/\/printf(\"[Vector addition of %d elements]\\n\", numElements);\n\n    \/\/ Allocate the host input vector A\n    float *h_A = (float *)malloc(size);\n\n    \/\/ Allocate the host input vector B\n    float *h_B = (float *)malloc(size);\n\n    \/\/ Allocate the host output vector C\n    float *h_C = (float *)malloc(size);\n\n    \/\/ Verify that allocations succeeded\n    if (h_A == NULL || h_B == NULL || h_C == NULL)\n    {\n        fprintf(stderr, \"Failed to allocate host vectors!\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    \/\/ Initialize the host input vectors\n    for (int i = 0; i < numElements; ++i)\n    {\n        h_A[i] = rand()\/(float)RAND_MAX;\n        h_B[i] = rand()\/(float)RAND_MAX;\n    }\n\n    \/\/ Allocate the device input vector A\n    float *d_A = NULL;\n    err = cudaMalloc((void **)&d_A, size);\n\n    if (err != cudaSuccess)\n    {\n        fprintf(stderr, \"Failed to allocate device vector A (error code %s)!\\n\", cudaGetErrorString(err));\n        exit(EXIT_FAILURE);\n    }\n\n    \/\/ Allocate the device input vector B\n    float *d_B = NULL;\n    err = cudaMalloc((void **)&d_B, size);\n\n    if (err != cudaSuccess)\n    {\n        fprintf(stderr, \"Failed to allocate device vector B (error code %s)!\\n\", cudaGetErrorString(err));\n        exit(EXIT_FAILURE);\n    }\n\n    \/\/ Allocate the device output vector C\n    float *d_C = NULL;\n    err = cudaMalloc((void **)&d_C, size);\n\n    if (err != cudaSuccess)\n    {\n        fprintf(stderr, \"Failed to allocate device vector C (error code %s)!\\n\", cudaGetErrorString(err));\n        exit(EXIT_FAILURE);\n    }\n\n    \/\/ Copy the host input vectors A and B in host memory to the device input vectors in\n    \/\/ device memory\n    \/\/printf(\"Copy input data from the host memory to the CUDA device\\n\");\n    err = cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice);\n\n    if (err != cudaSuccess)\n    {\n        fprintf(stderr, \"Failed to copy vector A from host to device (error code %s)!\\n\", cudaGetErrorString(err));\n        exit(EXIT_FAILURE);\n    }\n\n    err = cudaMemcpy(d_B, h_B, size, cudaMemcpyHostToDevice);\n\n    if (err != cudaSuccess)\n    {\n        fprintf(stderr, \"Failed to copy vector B from host to device (error code %s)!\\n\", cudaGetErrorString(err));\n        exit(EXIT_FAILURE);\n    }\n\n    \/\/ Launch the Vector Add CUDA Kernel\n    int threadsPerBlock = 256;\n    int blocksPerGrid =(numElements + threadsPerBlock - 1) \/ threadsPerBlock;\n    \/\/printf(\"CUDA kernel launch with %d blocks of %d threads\\n\", blocksPerGrid, threadsPerBlock);\n    vectorAdd<<<blocksPerGrid, threadsPerBlock>>>(d_A, d_B, d_C, numElements);\n    err = cudaGetLastError();\n\n    if (err != cudaSuccess)\n    {\n        fprintf(stderr, \"Failed to launch vectorAdd kernel (error code %s)!\\n\", cudaGetErrorString(err));\n        exit(EXIT_FAILURE);\n    }\n\n    \/\/ Copy the device result vector in device memory to the host result vector\n    \/\/ in host memory.\n    \/\/printf(\"Copy output data from the CUDA device to the host memory\\n\");\n    err = cudaMemcpy(h_C, d_C, size, cudaMemcpyDeviceToHost);\n\n    if (err != cudaSuccess)\n    {\n        fprintf(stderr, \"Failed to copy vector C from device to host (error code %s)!\\n\", cudaGetErrorString(err));\n        exit(EXIT_FAILURE);\n    }\n\n    \/\/ Verify that the result vector is correct\n    for (int i = 0; i < numElements; ++i)\n    {\n        if (fabs(h_A[i] + h_B[i] - h_C[i]) > 1e-5)\n        {\n            fprintf(stderr, \"Result verification failed at element %d!\\n\", i);\n            exit(EXIT_FAILURE);\n        }\n    }\n\n    \/\/ Free device global memory\n    err = cudaFree(d_A);\n\n    if (err != cudaSuccess)\n    {\n        fprintf(stderr, \"Failed to free device vector A (error code %s)!\\n\", cudaGetErrorString(err));\n        exit(EXIT_FAILURE);\n    }\n\n    err = cudaFree(d_B);\n\n    if (err != cudaSuccess)\n    {\n        fprintf(stderr, \"Failed to free device vector B (error code %s)!\\n\", cudaGetErrorString(err));\n        exit(EXIT_FAILURE);\n    }\n\n    err = cudaFree(d_C);\n\n    if (err != cudaSuccess)\n    {\n        fprintf(stderr, \"Failed to free device vector C (error code %s)!\\n\", cudaGetErrorString(err));\n        exit(EXIT_FAILURE);\n    }\n\n    \/\/ Free host memory\n    free(h_A);\n    free(h_B);\n    free(h_C);\n\n    return 0;\n}\n\n",
    "file": "\/home\/kobzol\/projects\/diplomka\/collection\/samples\/vectorAdd\/source.cu",
    "line": 35
  },
  "type": "metadata",
  "typeMap": [
    "float"
  ]
}
